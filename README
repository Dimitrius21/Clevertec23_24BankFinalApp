RESTful web-service, реализующей функционал для работы с банковскими сущностями :
Приложение состоит из 4 микросервисов: BankCongif(порт 8888) - настройки для остальных сервисов(реализован на основе Spring Cloud Config),
BankCurrencyRate(порт 8083) - сервис по предоставлению курсов валют
BankCustomer(порт 8082) - хранение данных о пользователях, генерирация JwtToken.
BankProduct(порт 8081) - сервис по манипуляции с основными сущностями.
Также в кодовою базу входят 2 Spring-starter - для логгирования контроллера и для обработки ошибок в сервисе.

Для запуска приложения - docker-compose up.

-------------------------------
API сервиса BankProduct:
К сущности Account:
 - может осуществлять любой пользователь:
GET : /account/{iban}–  получить данные Account по iban. Доступно пользователю с ролью ADMINISTRATOR для всех.
Пользователи с другой ролью могут получить информацию только своего Account. Возвращается Json формата AccountOutDto.
GET : /account[?page=номер&size=количество&sort=name-asc/desc] – получить список всех Account (со списком подкюченных
Card для каждого Account) . Опционально можно задать разбиение вывода постранично, а также отсортировать информацию
по указанному полю. Значения asc – по возрастанию, desc – по убыванию.
По умолчанию извлекаются первые 20 записей (без сортировки). Доступно только пользователю с ролью ADMINISTRATOR.
Возвращается Json формата AccountFullOutDto.
GET : /account/customer/{id} – найти(получить) список всех Account для заданного пользователя (его uuid). Доступно только
пользователю с ролью ADMINISTRATOR. Возвращается Json формата список<AccountOutDto>.
POST: /account – сохраняет Account в базе данных. Данные передаются в теле запроса в формате Json AccountInDto. Все поля
должны быть заполнены. Пользователь с ролью ADMINISTRATOR может создавать счета для любого пользователя, а с ролью USER -
только для себя. Возвращается Json формата AccountOutDto.
PUT: /account – внести изменения в данные Account. Данные передаются в теле запроса в формате Json AccountInDto. Изменеы
могут быть только поля - Main, MainAcc и CustomerType. Остальные игнорируются. Json запроса должен обязательно содержать
поля iban и CustomerId, по которым идентифицируется и проверяется Account.
Пользователь с ролью ADMINISTRATOR может создавать изменять Account для любого пользователя, а с ролью USER - только для себя.
DELETE: /account/{iban} – удаляет Account с указанным iban.  Доступно только пользователю с ролью SUPER_USER.

К сущности Card:
GET : /cards/{id} - получить данные Card по ее номеру. Доступно пользователю с ролью ADMINISTRATOR для всех. Пользователи
с другой ролью могут получить информацию только своей Card.
GET : /cards[?page=номер&size=количество] – получить список всех Card. Опционально можно задать разбиение вывода постранично.
По умолчанию извлекаются первые 20 записей. Доступно только пользователю с ролью ADMINISTRATOR.
GET : /cards/{id} – найти(получить) список всех Card для заданного пользователя (его uuid). Доступно только пользователю
с ролью ADMINISTRATOR.
POST: /cards – сохраняет Card в базе данных. Данные передаются в теле запроса. Все поля должны быть заполнены. Пользователь
с ролью ADMINISTRATOR может создавать карты для любого пользователя, а с ролью USER - только для себя.
PUT: /cards/{number} – внести изменения в данные Card с указанным номером. Данные передаются в теле запроса. Пользователь
с ролью ADMINISTRATOR может создавать изменять Card для любого пользователя, а с ролью USER - только для себя.
DELETE: /cards/{id} – удаляет Cards с указанным номером.  Доступно только пользователю с ролью SUPER_USER.

К сущности Credit:
GET : /credits/{contractNumber} - получить данные о Credit по номеру его контракта. Доступно пользователю с ролью ADMINISTRATOR
для всех. Пользователи с другой ролью могут получить информацию только для своего Credit.
GET : /credits[?page=номер&size=количество&sort=name-asc/desc] – получить список всех Credit. Опционально можно задать
разбиение вывода постранично. По умолчанию извлекаются первые 20 записей. Доступно только пользователю с ролью ADMINISTRATOR.
GET : /credits/customers/{id} - получить список Credit для заданого пользователя (по его uuid). Доступно только пользователю
с ролью ADMINISTRATOR.
POST: /credits – сохраняет информаци о Credit в базе данных. Данные передаются в теле запроса. Все поля должны быть заполнены.
Пользователь с ролью ADMINISTRATOR может создавать Credit для любого пользователя, а с ролью USER - только для себя.
PUT: /credits/{contractNumber} – внести изменения в данные Credit с указанным номером контракта. Данные передаются в теле
запроса. Пользователь с ролью ADMINISTRATOR может создавать изменять Credit для любого пользователя, а с ролью USER -
только для себя.
DELETE: /deposits/{contractNumber} – удаляет Credit по номеру его контракта.  Доступно только пользователю с ролью SUPER_USER.

К сущности Deposit:
GET : /deposits/{ibab} - получить данные о Deposit по номеру счета. Доступно пользователю с ролью ADMINISTRATOR для всех.
Пользователи с другой ролью могут получить информацию только для своего депозита.
GET : /deposits[?page=номер&size=количество&sort=name-asc/desc] – получить список всех Deposit. Опционально можно задать
разбиение вывода постранично. По умолчанию извлекаются первые 20 записей. Доступно только пользователю с ролью ADMINISTRATOR.
GET : /deposits/filter - получить список Deposit с фильтрацией по полям. Параметры задаются в строке запроса. Доступно
только пользователю с ролью ADMINISTRATOR.
POST: /deposits – сохраняет информаци о Deposit в базе данных. Данные передаются в теле запроса. Все поля должны быть заполнены.
Пользователь с ролью ADMINISTRATOR может создавать Deposit для любого пользователя, а с ролью USER - только для себя.
PUT: /deposits/{iban} – внести изменения в данные Deposits с указанным iban. Данные передаются в теле запроса. Пользователь
с ролью ADMINISTRATOR может создавать изменять Deposit для любого пользователя, а с ролью USER - только для себя.
DELETE: /deposits/{iban} – удаляет Deposit с указанным ibab.  Доступно только пользователю с ролью SUPER_USER.


Аутентификация и авторизация пользователя проводятся на основании JwtToken (Bearer token) который должен содержаться в
заголовоке Authorization. (Получение в сервисе BankCustomer:)

-------------------------------------
API сервиса BankBankCurrencyRate:
GET : /rate - получить курсы валют действующие на данный момент. Момент определяется временем в системе данного сервиса.
Ответ формата Json RatesOutDto
GET : /rate/time - получить курсы валют действующие указанный момент времени. Время задается в формате yyyy-mm-ddTHH:MM:SS.msZ -
и должно указываться с пересчетом на UTC+00. Ответ формата Json RatesOutDto
POST : /rate - сохранить курсы валют для заданного времени. Данные передаются в теле запроса в формате Json RatesInDto.
---------------------------------
API сервиса BankCustomer:
POST : /jwt - создать jwt-токен. В теле запроса передаются json с uuid полльзователя и его ролью. Доступна адна из следующих ролей:
USER, ADMINISTRATOR, SUPER_USER.
GET : /customers/{id} - получить данные Сustomer по ее номеру uuid.
GET : /customers[?page=номер&size=количество&sort=name-asc/desc] – получить список всех Customer. Опционально можно
задать разбиение вывода постранично, а также отсортировать информацию по указанному полю. Значения asc – по возрастанию,
desc – по убыванию. По умолчанию извлекаются первые 20 записей (без сортировки).
POST : /customers - сохранить данные о customer в базе данных. Данные передаются в теле запроса в формате Json.
PUT: /customers/{id} - изменить данные о пользователе в базе данных. В uri запроса указывается uuid пользователя. В теле
запроса в формате Json изменяемые данные.
DELETE: /customers/{id} - удалить данные о пользователе из БД. Используется механизм soft delete.
PATH: /customers/{id} - восстановиь данные о ранее удаленном пользователе по его uuid.


Для всех сущностей(Account, Card, Credit, Deposit, Customer, Rates) предусмотрено получение данных для сохранеия из RabbitMQ.
Используется direct exchange. Формат передаваемых из очереди сообщений - согласно задания.

Для кэширования сущностей в настройках необходимо задать:
caching:
  repository: имена классов (с маленькой буквы) репозиториев кэшируемых сущностей - accountRepository, cardRepository, creditRepository, depositRepository
caching:
  type : lru/lfu/redis - тип реализации способа кэширования
  size : 5   - размер кэша  для случаев lru/lfu

Для обработки ошибок используется отдельный стартер exception-handling-starter. Его подкючение осуществляется в файле
настроек через установку свойства exception.custom-handler.enable = true
Для логгировани параметров для слоя Controlles используется стартер exception-handling-starter. Его подкючение осуществляется
в файле настроек через установку свойства aop.logging.enabled = true.

